7 % 10
10 % 10
import tqdm
list(tqdm.tqdm(range(10))
)
list(tqdm.tqdm(range(10)))
list(tqdm.tqdm(range(10), ascii=True))
list(tqdm.tqdm(range(10), ascii=True, n_cols=10))
list(tqdm.tqdm(range(10), ascii=True, cols=10))
list(tqdm.tqdm(range(10), ascii=True, ncols=10))
list(tqdm.tqdm(range(10), ascii=True, ncols=20))
list(tqdm.tqdm(range(10), ascii=True, ncols=30))
list(tqdm.tqdm(range(10), ascii=True, ncols=40))
list(tqdm.tqdm(range(10), ascii=True, ncols=50))
list(tqdm.tqdm(range(10), ascii=True, ncols=100))
list(tqdm.tqdm(range(10), ascii=True, ncols=80))
list(tqdm.tqdm(range(10), ascii=True, ncols=90))
from pypatconsole import menu
def hello(a: int):
	print(a+a*a)
menu([hello])
def hello(a: int):
	"""Hello!"""
	print(a+a*a)
menu([hello])
def hello(a: int):
	"""Hello!"""
	print(a+a*a)
	input()
menu([hello])
exit()
[1,23,,4]
[1,23,4]
[1,23,4].clear()
a = [1,2,3,4,5,6,7]
a
a.clear()
a
ls
trainloader
dir(trainloader)
trainloader.generator
print(trainloader.generator)
len(trainloader)
trainloader.dataset
dir(trainloader.dataset)
trainloader.dataset.indices
trainloader.dataset.indices.max()
trainloader.dataset.indices.min()
[("a","b") for i in range(10)]
[*("a","b") for i in range(10)]
*[("a","b") for i in range(10)]
print(*[("a","b") for i in range(10)])
("a","b") for i in range(10)]
("a","b") for i in range(10)
from itertools import chain
[("a","b") for i in range(10)]
chain([("a","b") for i in range(10)])
list(chain([("a","b") for i in range(10)]))
chain.from_iter
list(chain.from_iterable([("a","b") for i in range(10)]))
print((chain.from_iterable([("a","b") for i in range(10)])))
print(*(chain.from_iterable([("a","b") for i in range(10)])))
a = [1,1,1,1]
b = [2,2,2,2]
zip(a,b)
list(zip(a,b))
interleave
reduce(lambda x: tuple.__add__, zip(a, b))
filter(lambda x: tuple.__add__, zip(a, b))
list(filter(lambda x: tuple.__add__, zip(a, b)))
list(map(lambda x: tuple.__add__, zip(a, b)))
a = [1,1,1,1]
a
b
[val for pair in zip(a, b) for val in pair]
c = [1,2]
c
import torch
[(nn.Linear(), nn.ReLU()) for i in range 2]
[(nn.Linear(), nn.ReLU()) for i in range(2)]
from torch import nn
[(nn.Linear(), nn.ReLU()) for i in range(2)]
[(nn.Linear(1,1), nn.ReLU()) for i in range(2)]
[(nn.Linear(1,1), nn.ReLU()) for i in range(3)]
[*(nn.Linear(1,1), nn.ReLU()) for i in range(3)]
[(nn.Linear(1,1), nn.ReLU()) for i in range(3)]
[a := (nn.Linear(1,1), nn.ReLU()) for i in range(3)]
[a := (nn.Linear(1,1), nn.ReLU()) for i in range(3) for pair in a]
[a := (nn.Linear(1,1), nn.ReLU()) for i in range(3)]
a
[a := (nn.Linear(1,1), nn.ReLU()) for i in range(3) for val in a]
[(nn.Linear(1,1), nn.ReLU()) for i in range(3)]
from itertools import chain
chain.from_iter([(nn.Linear(1,1), nn.ReLU()) for i in range(3)])
chain.from_iterable([(nn.Linear(1,1), nn.ReLU()) for i in range(3)])
*chain.from_iterable([(nn.Linear(1,1), nn.ReLU()) for i in range(3)])
print(*chain.from_iterable([(nn.Linear(1,1), nn.ReLU()) for i in range(3)]))
print(*chain.from_iterable(((nn.Linear(1,1), nn.ReLU()) for i in range(3))))
print(1,2,3)
